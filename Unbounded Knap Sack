int knapSack(int N, int W, int val[], int wt[])
    {
        
        vector< vector<int>>dp(N+1,vector<int>(W+1,0));
        for(int i=1;i<=N;i++)
        {
            for(int j=1;j<=W;j++)
            {
                if(wt[i-1]>j)dp[i][j]=dp[i-1][j];
                else
                {
                   dp[i][j]=max(dp[i-1][j], val[i-1]+dp[i][j-wt[i-1]]);
                }
            }
        }
        return dp[N][W];
        // code here
    }
    
    int rec(int ptr,int val[], int wt[], vector<vector<int> >&dp,int W)
    {
        if(ptr<0) return 0;
        if(dp[ptr][W]==-1)
        {
            if(wt[ptr]>W) dp[ptr][W]=rec(ptr-1,val,wt,dp,W);
            else {
               dp[ptr][W]=max(rec(ptr-1,val,wt,dp,W),val[ptr]+rec(ptr,val,wt,dp,W-wt[ptr]));
            }
                
            }
        return dp[ptr][W];
    }
    
    int knapSack(int N, int W, int val[], int wt[])
    {
        vector< vector<int>> dp(N, vector<int>(W+1,-1));
        
        return rec(N-1,val,wt,dp,W);
        
        // code here
    }
    
    
